Q1. Given an array. FInd the number X in the array. If the element is present, return the index of the element,
else print “Element not found in array”. Input the size of array, array from user and the element X from user.
Use Linear Search to find the element.

Ans:-
		import java.util.Scanner;

public class LinearSearch {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);

        // Size of an Element entered by the user
        System.out.println("Enter the no of elements");

        int n = sc.nextInt();

        // Enter the elements of an array
        System.out.println("Enter the elements of an array");

        int [] arr = new int [n];

        for(int i=0 ; i<n ; i++)
        {
            arr[i] = sc.nextInt();
        }

        //Target element from the user
        System.out.println("Enter the targeted eleement");
        
        int x = sc.nextInt();

        //Implementation of a linear search

        int idx = -1;
        for(int i=0; i<n ; i++)
        {
            if(arr[i]==x)
            {
                idx=i;
                break;
            }
        }
        if(idx==-1)
        {
            System.out.println("Entered number is not found in an array");
        }
        else
        {
            System.out.println("Index of the entered number is:- " + idx);
        }
    }
}

Q2. Given an array and an integer “target”, return the last occurrence of “target” in the array. If the target is
not present return -1.
Input 1: arr = [1 1 1 2 3 4 4 5 6 6 6 6] , target = 4
Output 1: 6
Input 2: arr = [2 2 2 6 6 18 29 30 30 30] , target = 15
Output 2: -1

Ans:-
		import java.util.*;
 class higherbound {

    public static int Hbound(int [] arr, int target){
        int low = 0, high =arr.length-1;
        int result = -1;
        while(low<=high){
            int mid = low + (high-low)/2;
            if(arr[mid] == target){
                result = mid;
                //Traverse to the left side of an array
                low=mid+1;
            }
            else if (arr[mid]>target){
                high = mid - 1;
            }
            else{
                low=mid+1;
            }
        }
        return result;
    }
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter the total no of elements");
        int n = sc.nextInt();
        int [] arr = new int[n];
        System.out.println("Enter the no of elements of an array");
        
        for(int i=0 ; i<n ; i++)
        {
            arr[i] = sc.nextInt();
        }

        System.out.println("Enter the no you want to search in an array");
        int target = sc.nextInt();

        int result = Hbound(arr,target);

        if(result==-1)
        {
            System.out.println("-1");
        }
        else{
            System.out.println("Emtered no is found at the index of :- " + result);
        }
    }
}


Q3. Given a sorted binary array, efficiently count the total number of 1’s in it.
Input 1: arr = [0 0 0 0 1 1 1 1 1 1]
Output 1: 6
Input 2: arr = [ 0 0 0 0 0 1 1]
Output 2: 2

Ans:-
		// Java program to count 1's in a sorted array
class CountOnes {
	
	int countOnes(int arr[], int low, int high)
	{
		if (high >= low) {
			// get the middle index
			int mid = low + (high - low) / 2;

			// check if the element at middle index is last
			// 1
			if ((mid == high || arr[mid + 1] == 0)
				&& (arr[mid] == 1))
				return mid + 1;

			// If element is not last 1, recur for right
			// side
			if (arr[mid] == 1)
				return countOnes(arr, (mid + 1), high);

			// else recur for left side
			return countOnes(arr, low, (mid - 1));
		}
		return 0;
	}

	/* Driver code */
	public static void main(String args[])
	{
		CountOnes ob = new CountOnes();
		int arr[] = { 1, 1, 1, 1, 0, 0, 0 };
		int n = arr.length;
		System.out.println("Count of 1's in given array is "
						+ ob.countOnes(arr, 0, n - 1));
	}
}


Q4. Given a sorted integer array containing duplicates, count occurrences of a given number. If the element
is not found in the array, report that as well.
Input: nums[] = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]
target = 5
Output: Target 5 occurs 3 times
Input: nums[] = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]
target = 6
Output: Target 6 occurs 2 times

Ans:-
	// Java program to count occurrences
// of an element

class Main
{
	// Returns number of times x occurs in arr[0..n-1]
	static int countOccurrences(int arr[], int n, int x)
	{
		int res = 0;
		for (int i=0; i<n; i++)
			if (x == arr[i])
			res++;
		return res;
	}
	
	public static void main(String args[])
	{
		int arr[] = {1, 2, 2, 2, 2, 3, 4, 7 ,8 ,8 };
		int n = arr.length;
		int x = 2;
		System.out.println(countOccurrences(arr, n, x));
	}
}

Q5: Given a positive integer num, return true if num is a perfect square or false otherwise.
A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer
with itself.
Example 1:
Input: num = 16
Output: true
Explanation: We return true because 4 * 4 = 16 and 4 is an integer.
Example 2:
Input: num = 14
Output: false
Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.

Ans:-

		// Java program to find if x is a
// perfect square.
class GFG {

	static boolean isPerfectSquare(int x)
	{
		if (x >= 0) {
		
			// Find floating point value of
			// square root of x.
			int sr = (int)Math.sqrt(x);
		
			// if product of square root
			// is equal, then
			// return T/F

			return ((sr * sr) == x);
		}
		return false;
	}

	// Driver code
	public static void main(String[] args)
	{
		int x = 2502;

		if (isPerfectSquare(x))
			System.out.print("True");
		else
			System.out.print("False");
	}
}


